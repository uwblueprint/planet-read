version: 2.1
jobs:
  lint:
    docker:
      - image: cimg/python:3.9.7
    steps:
      - checkout
      - run:
          name: Run linter checks
          command: |
            pip install black isort
            echo "Running black checks..."
            black backend/python/app/ --check
            echo "Checking import order..."
            isort --profile black backend/python/app/ -c
            echo "Code properly linted!"

  build:
    docker:
      - image: cimg/base:2021.05
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Create env file
          command: touch .env # empty .env file needed to build containers
      - run:
          name: Build backend and frontend images
          command: |
            set -x
            echo "Build images"
            docker-compose build frontend 
            docker-compose build py-backend

  test:
    docker:
      - image: cimg/base:2021.05
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Create env file
          command: |
            touch .env
            echo "Writing env variables to .env"
            env > .env
      - run:
          name: Running tests
          command: |
            set -x
            echo "Running backend tests"
            docker-compose -f docker-compose.testing.yml up --abort-on-container-exit

  deploy:
    docker:
      - image: cimg/node:14.15.5
    steps:
      - checkout
      - run:
          name: Build frontend
          command: |
            cd frontend
            echo "Write environment variables to .env.production"
            touch .env.production
            REACT_APP_BACKEND_URL=`echo ${REACT_APP_BACKEND_URL_BASE64} | base64 --decode`
            echo "REACT_APP_BACKEND_URL=$REACT_APP_BACKEND_URL" > .env.production
            yarn install --frozen-lockfile
            yarn build
      - run:
          name: Deploy frontend
          command: |
            sudo apt-get update
            sudo apt-get -qq install git-ftp
            echo "Setting up frontend FTP credentials..."
            HOST=`echo ${FTP_HOST_BASE64} | base64 --decode`
            USERNAME=`echo ${FTP_USERNAME_BASE64} | base64 --decode`
            PASSWORD=`echo ${FTP_PASSWORD_BASE64} | base64 --decode`
            echo "Deploying frontend..."
            git config git-ftp.url ${HOST}
            git config git-ftp.user ${USERNAME}
            git config git-ftp.password ${PASSWORD}
            touch .git-ftp-include
            cat frontend/.git-ftp-include > .git-ftp-include
            git ftp push --insecure --syncroot frontend/build
            rm .git-ftp-include
            echo "Frontend deployed!"
      - run:
          name: Deploy backend
          command: |
            sudo apt-get update
            sudo apt-get -qq install git-ftp
            echo "Setting up backend FTP credentials..."
            HOST_BACKEND=`echo ${FTP_HOST_BACKEND_BASE64} | base64 --decode`
            USERNAME_BACKEND=`echo ${FTP_USERNAME_BACKEND_BASE64} | base64 --decode`
            PASSWORD_BACKEND=`echo ${FTP_PASSWORD_BACKEND_BASE64} | base64 --decode`
            echo "Deploying backend..."
            git config git-ftp.url "${HOST_BACKEND}/home/bp-amluser/aml/backend/"
            git config git-ftp.user ${USERNAME_BACKEND}
            git config git-ftp.password ${PASSWORD_BACKEND}
            git ftp push --insecure --syncroot backend/python
            echo "Backend deployed!"

workflows:
  version: 2
  lint-build-test:
    jobs:
      - lint:
          filters:
            tags:
              only: /^v.*/
      - build:
          requires:
            - lint
          filters:
            tags:
              only: /^v.*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
      - deploy:
          requires:
            - test
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
